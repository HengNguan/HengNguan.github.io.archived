[{"C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\index.js":"1","C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer1\\index.js":"2","C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\reportWebVitals.js":"3","C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer2\\index.js":"4","C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer3\\index.js":"5","C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer4\\index.js":"6"},{"size":3835,"mtime":1656423625921,"results":"7","hashOfConfig":"8"},{"size":4837,"mtime":1656409120268,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1656240917435,"results":"10","hashOfConfig":"8"},{"size":9156,"mtime":1656409991150,"results":"11","hashOfConfig":"8"},{"size":4839,"mtime":1656409116668,"results":"12","hashOfConfig":"8"},{"size":9156,"mtime":1656409966758,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14xp43h",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\index.js",[],[],"C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer1\\index.js",[],[],"C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer2\\index.js",["35","36"],[],"import { Component } from \"react\";\r\nimport './index.css'\r\n// import {useRouter} from \"next/router\";\r\n\r\n// const router = useRouter();\r\n// const query = router.query;\r\n// const name = query.name; \r\n\r\nclass DigitalTimer2 extends Component {\r\n    state = {\r\n      isTimerRunning: false,\r\n      timerLimit: 2,\r\n      currentRunningSeconds: 0,\r\n      isTimerRunning2: false,\r\n      timerLimit2: 2,\r\n      currentRunningSeconds2: 0,\r\n      rightFlag: true,\r\n      leftFlag: false\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearTimer()\r\n        this.clearTimer2()\r\n    }\r\n    \r\n    clearTimer = () => {\r\n        clearInterval(this.intervalId)\r\n    }\r\n\r\n    clearTimer2 = () => {\r\n      clearInterval(this.intervalId2)\r\n    }\r\n    \r\n    onClickResetTimer = () => {\r\n        // this.notifyTimerReset('Timer has me reset to default')\r\n        this.setState({\r\n          isTimerRunning: false,\r\n          timerLimit: 2,\r\n          currentRunningSeconds: 0,\r\n          isTimerRunning2: false,\r\n          timerLimit2: 2,\r\n          currentRunningSeconds2: 0,\r\n        })\r\n        this.clearTimer()\r\n        this.clearTimer2()\r\n    }\r\n\r\n    \r\n\r\n    startTimerCountDown = () => {\r\n      const {currentRunningSeconds, timerLimit} = this.state\r\n      const isTimeCompleted = currentRunningSeconds === timerLimit * 60\r\n      if (isTimeCompleted) {\r\n        // this.notifyTimerCompleted('Your set time is Completed')\r\n        this.setState({isTimerRunning: false, currentRunningSeconds: 0})\r\n        this.clearTimer()\r\n      } else {\r\n        this.setState(prevState => ({\r\n          currentRunningSeconds: prevState.currentRunningSeconds + 1,\r\n        }))\r\n      }\r\n    }\r\n\r\n    startTimerCountDown2 = () => {\r\n      const {currentRunningSeconds2, timerLimit2} = this.state\r\n      const isTimeCompleted2 = currentRunningSeconds2 === timerLimit2 * 60\r\n      if (isTimeCompleted2) {\r\n        // this.notifyTimerCompleted('Your set time is Completed')\r\n        this.setState({isTimerRunning2: false, currentRunningSeconds2: 0})\r\n        this.clearTimer2()\r\n      } else {\r\n        this.setState(prevState => ({\r\n          currentRunningSeconds2: prevState.currentRunningSeconds2 + 1,\r\n        }))\r\n      }\r\n    }\r\n    \r\n    startStopTimer = () => {\r\n        const {isTimerRunning, currentRunningSeconds, timerLimit} = this.state\r\n        this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\r\n        const isTimeCompleted = currentRunningSeconds === timerLimit * 60\r\n        if (isTimeCompleted) {\r\n          this.setState({isTimerRunning: false})\r\n          this.clearTimer()\r\n        }\r\n        if (isTimerRunning) {\r\n          this.clearTimer()\r\n          this.setState({isTimerRunning: false})\r\n        } else {\r\n          this.intervalId = setInterval(() => {\r\n            this.startTimerCountDown()\r\n          }, 1000)\r\n        }\r\n    }\r\n\r\n    startStopTimer2 = () => {\r\n      const {isTimerRunning2, currentRunningSeconds2, timerLimit2} = this.state\r\n      this.setState(prevState => ({isTimerRunning2: !prevState.isTimerRunning2}))\r\n      const isTimeCompleted2 = currentRunningSeconds2 === timerLimit2 * 60\r\n      if (isTimeCompleted2) {\r\n        this.setState({isTimerRunning2: false})\r\n        this.clearTimer2()\r\n      }\r\n      if (isTimerRunning2) {\r\n        this.clearTimer2()\r\n        this.setState({isTimerRunning2: false})\r\n      } else {\r\n        this.intervalId2 = setInterval(() => {\r\n          this.startTimerCountDown2()\r\n        }, 1000)\r\n      }\r\n  }\r\n\r\n    onClickSwitchTimer = () => {\r\n      const {rightFlag, leftFlag} = this.state\r\n      // const {isTimerRunning2, currentRunningSeconds2, timerLimit2} = this.state\r\n      // const {isTimerRunning, currentRunningSeconds, timerLimit} = this.state\r\n\r\n      if (rightFlag){\r\n        this.setState({isTimerRunning:true})\r\n        this.setState({isTimerRunning2:false})\r\n        this.startStopTimer2()\r\n        this.startStopTimer()\r\n        this.setState({leftFlag: true})\r\n        this.setState({rightFlag: false})\r\n        // console.log(this.state.rightFlag)\r\n        // console.log(this.state.leftFlag)\r\n      } else{\r\n        this.setState({isTimerRunning2:true})\r\n        this.setState({isTimerRunnin:false})\r\n        this.startStopTimer2()\r\n        this.startStopTimer()\r\n        this.setState({leftFlag: false})\r\n        this.setState({rightFlag: true})\r\n        // console.log(this.state.rightFlag)\r\n        // console.log(this.state.leftFlag)\r\n      }\r\n  }\r\n\r\n\r\n  \r\n\r\n    renderTimerControlOptions = () => {\r\n        const {isTimerRunning} = this.state\r\n        const {isTimerRunning2} = this.state\r\n        const playImageUrl =\r\n          'https://cdn-icons-png.flaticon.com/512/0/375.png'\r\n        const stopImageUrl =\r\n          'https://cdn2.iconfinder.com/data/icons/music-player-8/64/pause-512.png'\r\n        const resetImageUrl =\r\n          'https://icons-for-free.com/download-icon-bx+reset-1325051909167782801_512.png'\r\n        const switchImageUrl =\r\n          'https://cdn.iconscout.com/icon/free/png-256/switch-1470433-1244947.png'\r\n        const startStopImage = isTimerRunning || isTimerRunning2 ? stopImageUrl : playImageUrl\r\n        const startStopAltText = isTimerRunning || isTimerRunning2 ? 'pause icon' : 'play icon'\r\n        const startStopText = isTimerRunning || isTimerRunning2 ? '停止' : '开始'\r\n        \r\n        \r\n        return (\r\n          <div className=\"control-options-container\">\r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.startStopTimer}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img\r\n                  src={startStopImage}\r\n                  className=\"start-stop-img\"\r\n                  alt={startStopAltText}\r\n                />\r\n                <h1 className=\"start-stop-text\">{startStopText}</h1>\r\n              </div>\r\n            </button>\r\n\r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.onClickSwitchTimer}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img src={switchImageUrl} className=\"reset-img\" alt=\"reset icon\" />\r\n                <h1 className=\"start-stop-text\">切换</h1>\r\n              </div>\r\n            </button>\r\n            \r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.onClickResetTimer}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img src={resetImageUrl} className=\"reset-img\" alt=\"reset icon\" />\r\n                <h1 className=\"start-stop-text\">重置</h1>\r\n              </div>\r\n            </button>\r\n\r\n            \r\n          </div>\r\n        )\r\n    }\r\n\r\n    convertTimeToTimerFormat = () => {\r\n        const {timerLimit, currentRunningSeconds} = this.state\r\n        const timeInSeconds = timerLimit * 60 - currentRunningSeconds\r\n        const minutes = Math.floor(timeInSeconds / 60)\r\n        const seconds = Math.floor(timeInSeconds % 60)\r\n        const minutesInStringFormat = minutes > 9 ? minutes : `0${minutes}`\r\n        const secondsInStringFormat = seconds > 9 ? seconds : `0${seconds}`\r\n        return `${minutesInStringFormat}:${secondsInStringFormat}`\r\n    }\r\n    convertTimeToTimerFormat2 = () => {\r\n      const {timerLimit2, currentRunningSeconds2} = this.state\r\n      const timeInSeconds2 = timerLimit2 * 60 - currentRunningSeconds2\r\n      const minutes2 = Math.floor(timeInSeconds2 / 60)\r\n      const seconds2 = Math.floor(timeInSeconds2 % 60)\r\n      const minutesInStringFormat2 = minutes2 > 9 ? minutes2 : `0${minutes2}`\r\n      const secondsInStringFormat2 = seconds2 > 9 ? seconds2 : `0${seconds2}`\r\n      return `${minutesInStringFormat2}:${secondsInStringFormat2}`\r\n  }\r\n\r\n    render() {\r\n        const {isTimerRunning} = this.state\r\n        const timerStatusText = isTimerRunning ? '计时中' : '暂停中'\r\n        return (\r\n          <div className=\"app-container\">\r\n            {/* <div className=\"timer-heading\">福联青全国中学华语辩论比赛</div>\r\n            <div className=\"header-container\">\r\n              <br></br>\r\n              <h1 className=\"timer-heading\">双方对辩</h1>\r\n            </div> */}\r\n            <div>\r\n              <div>\r\n                <div className=\"timer-block\">\r\n                  <h1 className=\"time-text\">\r\n                  <div className = \"fang-text\">&nbsp;正方&nbsp;&nbsp;</div>\r\n                    {this.convertTimeToTimerFormat()} \r\n                    <div className = \"fang-text\">&nbsp;&nbsp;vs&nbsp;&nbsp;</div>\r\n                    {this.convertTimeToTimerFormat2()}\r\n                    <div className = \"fang-text\">&nbsp;&nbsp;反方&nbsp;</div>\r\n                  </h1>\r\n                  <p></p>\r\n                  {/* <p className=\"time-status\">{timerStatusText}</p> */}\r\n                </div>\r\n              </div>\r\n              <div className=\"timer-control-container\">\r\n                {this.renderTimerControlOptions()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default DigitalTimer2","C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer3\\index.js",[],[],"C:\\Users\\hengngua\\OneDrive - Intel Corporation\\Desktop\\Learn\\timer\\debate-timer2\\src\\components\\DigitalTimer4\\index.js",["37","38"],[],"import { Component } from \"react\";\r\nimport './index.css'\r\n// import {useRouter} from \"next/router\";\r\n\r\n// const router = useRouter();\r\n// const query = router.query;\r\n// const name = query.name; \r\n\r\nclass DigitalTimer4 extends Component {\r\n    state = {\r\n      isTimerRunning: false,\r\n      timerLimit: 2,\r\n      currentRunningSeconds: 0,\r\n      isTimerRunning2: false,\r\n      timerLimit2: 2,\r\n      currentRunningSeconds2: 0,\r\n      rightFlag: false,\r\n      leftFlag: true\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearTimer()\r\n        this.clearTimer2()\r\n    }\r\n    \r\n    clearTimer = () => {\r\n        clearInterval(this.intervalId)\r\n    }\r\n\r\n    clearTimer2 = () => {\r\n      clearInterval(this.intervalId2)\r\n    }\r\n    \r\n    onClickResetTimer = () => {\r\n        // this.notifyTimerReset('Timer has me reset to default')\r\n        this.setState({\r\n          isTimerRunning: false,\r\n          timerLimit: 2,\r\n          currentRunningSeconds: 0,\r\n          isTimerRunning2: false,\r\n          timerLimit2: 2,\r\n          currentRunningSeconds2: 0,\r\n        })\r\n        this.clearTimer()\r\n        this.clearTimer2()\r\n    }\r\n\r\n    \r\n\r\n    startTimerCountDown = () => {\r\n      const {currentRunningSeconds, timerLimit} = this.state\r\n      const isTimeCompleted = currentRunningSeconds === timerLimit * 60\r\n      if (isTimeCompleted) {\r\n        // this.notifyTimerCompleted('Your set time is Completed')\r\n        this.setState({isTimerRunning: false, currentRunningSeconds: 0})\r\n        this.clearTimer()\r\n      } else {\r\n        this.setState(prevState => ({\r\n          currentRunningSeconds: prevState.currentRunningSeconds + 1,\r\n        }))\r\n      }\r\n    }\r\n\r\n    startTimerCountDown2 = () => {\r\n      const {currentRunningSeconds2, timerLimit2} = this.state\r\n      const isTimeCompleted2 = currentRunningSeconds2 === timerLimit2 * 60\r\n      if (isTimeCompleted2) {\r\n        // this.notifyTimerCompleted('Your set time is Completed')\r\n        this.setState({isTimerRunning2: false, currentRunningSeconds2: 0})\r\n        this.clearTimer2()\r\n      } else {\r\n        this.setState(prevState => ({\r\n          currentRunningSeconds2: prevState.currentRunningSeconds2 + 1,\r\n        }))\r\n      }\r\n    }\r\n    \r\n    startStopTimer = () => {\r\n        const {isTimerRunning, currentRunningSeconds, timerLimit} = this.state\r\n        this.setState(prevState => ({isTimerRunning: !prevState.isTimerRunning}))\r\n        const isTimeCompleted = currentRunningSeconds === timerLimit * 60\r\n        if (isTimeCompleted) {\r\n          this.setState({isTimerRunning: false})\r\n          this.clearTimer()\r\n        }\r\n        if (isTimerRunning) {\r\n          this.clearTimer()\r\n          this.setState({isTimerRunning: false})\r\n        } else {\r\n          this.intervalId = setInterval(() => {\r\n            this.startTimerCountDown()\r\n          }, 1000)\r\n        }\r\n    }\r\n\r\n    startStopTimer2 = () => {\r\n      const {isTimerRunning2, currentRunningSeconds2, timerLimit2} = this.state\r\n      this.setState(prevState => ({isTimerRunning2: !prevState.isTimerRunning2}))\r\n      const isTimeCompleted2 = currentRunningSeconds2 === timerLimit2 * 60\r\n      if (isTimeCompleted2) {\r\n        this.setState({isTimerRunning2: false})\r\n        this.clearTimer2()\r\n      }\r\n      if (isTimerRunning2) {\r\n        this.clearTimer2()\r\n        this.setState({isTimerRunning2: false})\r\n      } else {\r\n        this.intervalId2 = setInterval(() => {\r\n          this.startTimerCountDown2()\r\n        }, 1000)\r\n      }\r\n  }\r\n\r\n    onClickSwitchTimer = () => {\r\n      const {rightFlag, leftFlag} = this.state\r\n      // const {isTimerRunning2, currentRunningSeconds2, timerLimit2} = this.state\r\n      // const {isTimerRunning, currentRunningSeconds, timerLimit} = this.state\r\n\r\n      if (leftFlag){\r\n        this.setState({isTimerRunning2:true})\r\n        this.setState({isTimerRunning:false})\r\n        this.startStopTimer2()\r\n        this.startStopTimer()\r\n        this.setState({leftFlag: false})\r\n        this.setState({rightFlag: true})\r\n        // console.log(this.state.rightFlag)\r\n        // console.log(this.state.leftFlag)\r\n      } else{\r\n        this.setState({isTimerRunning:true})\r\n        this.setState({isTimerRunnin2:false})\r\n        this.startStopTimer2()\r\n        this.startStopTimer()\r\n        this.setState({leftFlag: true})\r\n        this.setState({rightFlag: false})\r\n        // console.log(this.state.rightFlag)\r\n        // console.log(this.state.leftFlag)\r\n      }\r\n  }\r\n\r\n\r\n  \r\n\r\n    renderTimerControlOptions = () => {\r\n        const {isTimerRunning} = this.state\r\n        const {isTimerRunning2} = this.state\r\n        const playImageUrl =\r\n          'https://cdn-icons-png.flaticon.com/512/0/375.png'\r\n        const stopImageUrl =\r\n          'https://cdn2.iconfinder.com/data/icons/music-player-8/64/pause-512.png'\r\n        const resetImageUrl =\r\n          'https://icons-for-free.com/download-icon-bx+reset-1325051909167782801_512.png'\r\n        const switchImageUrl =\r\n          'https://cdn.iconscout.com/icon/free/png-256/switch-1470433-1244947.png'\r\n        const startStopImage = isTimerRunning || isTimerRunning2 ? stopImageUrl : playImageUrl\r\n        const startStopAltText = isTimerRunning || isTimerRunning2 ? 'pause icon' : 'play icon'\r\n        const startStopText = isTimerRunning || isTimerRunning2 ? '停止' : '开始'\r\n        \r\n        \r\n        return (\r\n          <div className=\"control-options-container\">\r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.startStopTimer2}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img\r\n                  src={startStopImage}\r\n                  className=\"start-stop-img\"\r\n                  alt={startStopAltText}\r\n                />\r\n                <h1 className=\"start-stop-text\">{startStopText}</h1>\r\n              </div>\r\n            </button>\r\n\r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.onClickSwitchTimer}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img src={switchImageUrl} className=\"reset-img\" alt=\"reset icon\" />\r\n                <h1 className=\"start-stop-text\">切换</h1>\r\n              </div>\r\n            </button>\r\n            \r\n            <button\r\n              className=\"start-stop-button\"\r\n              type=\"button\"\r\n              onClick={this.onClickResetTimer}\r\n            >\r\n              <div className=\"start-stop-container\">\r\n                <img src={resetImageUrl} className=\"reset-img\" alt=\"reset icon\" />\r\n                <h1 className=\"start-stop-text\">重置</h1>\r\n              </div>\r\n            </button>\r\n\r\n            \r\n          </div>\r\n        )\r\n    }\r\n\r\n    convertTimeToTimerFormat = () => {\r\n        const {timerLimit, currentRunningSeconds} = this.state\r\n        const timeInSeconds = timerLimit * 60 - currentRunningSeconds\r\n        const minutes = Math.floor(timeInSeconds / 60)\r\n        const seconds = Math.floor(timeInSeconds % 60)\r\n        const minutesInStringFormat = minutes > 9 ? minutes : `0${minutes}`\r\n        const secondsInStringFormat = seconds > 9 ? seconds : `0${seconds}`\r\n        return `${minutesInStringFormat}:${secondsInStringFormat}`\r\n    }\r\n    convertTimeToTimerFormat2 = () => {\r\n      const {timerLimit2, currentRunningSeconds2} = this.state\r\n      const timeInSeconds2 = timerLimit2 * 60 - currentRunningSeconds2\r\n      const minutes2 = Math.floor(timeInSeconds2 / 60)\r\n      const seconds2 = Math.floor(timeInSeconds2 % 60)\r\n      const minutesInStringFormat2 = minutes2 > 9 ? minutes2 : `0${minutes2}`\r\n      const secondsInStringFormat2 = seconds2 > 9 ? seconds2 : `0${seconds2}`\r\n      return `${minutesInStringFormat2}:${secondsInStringFormat2}`\r\n  }\r\n\r\n    render() {\r\n        const {isTimerRunning} = this.state\r\n        const timerStatusText = isTimerRunning ? '计时中' : '暂停中'\r\n        return (\r\n          <div className=\"app-container\">\r\n            {/* <div className=\"timer-heading\">福联青全国中学华语辩论比赛</div>\r\n            <div className=\"header-container\">\r\n              <br></br>\r\n              <h1 className=\"timer-heading\">双方对辩</h1>\r\n            </div> */}\r\n            <div>\r\n              <div>\r\n                <div className=\"timer-block\">\r\n                  <h1 className=\"time-text\">\r\n                  <div className = \"fang-text\">&nbsp;正方&nbsp;&nbsp;</div>\r\n                    {this.convertTimeToTimerFormat()} \r\n                    <div className = \"fang-text\">&nbsp;&nbsp;vs&nbsp;&nbsp;</div>\r\n                    {this.convertTimeToTimerFormat2()}\r\n                    <div className = \"fang-text\">&nbsp;&nbsp;反方&nbsp;</div>\r\n                  </h1>\r\n                  <p></p>\r\n                  {/* <p className=\"time-status\">{timerStatusText}</p> */}\r\n                </div>\r\n              </div>\r\n              <div className=\"timer-control-container\">\r\n                {this.renderTimerControlOptions()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n}\r\n\r\nexport default DigitalTimer4",{"ruleId":"39","severity":1,"message":"40","line":115,"column":25,"nodeType":"41","messageId":"42","endLine":115,"endColumn":33},{"ruleId":"39","severity":1,"message":"43","line":224,"column":15,"nodeType":"41","messageId":"42","endLine":224,"endColumn":30},{"ruleId":"39","severity":1,"message":"44","line":115,"column":14,"nodeType":"41","messageId":"42","endLine":115,"endColumn":23},{"ruleId":"39","severity":1,"message":"43","line":224,"column":15,"nodeType":"41","messageId":"42","endLine":224,"endColumn":30},"no-unused-vars","'leftFlag' is assigned a value but never used.","Identifier","unusedVar","'timerStatusText' is assigned a value but never used.","'rightFlag' is assigned a value but never used."]